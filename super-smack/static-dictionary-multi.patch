--- super-smack-1.3/src/client.cc	2005-05-30 03:42:52.000000000 -0700
+++ super-smack-1.3.jcole/src/client.cc	2006-06-08 13:23:29.000000000 -0700
@@ -30,7 +30,7 @@
 #include <sys/types.h>
 #include <sys/ipc.h>
 #include <sys/sem.h>
-
+#include <map>
 
 #define MAX_VAR_BUF 512
 
@@ -160,7 +160,12 @@
   int offset = 0;
   int i;
   int in_var = 0;
+  int in_var_index = 0;
   int escaped = 0;
+  int is_static = 0;
+  int var_index = 0;
+  int is_var_index = 0;
+  map< string, string *, less<string> > static_words;
 
   for(i = 0; int c = query[i]; i++)
     {
@@ -187,7 +192,23 @@
       // if in_var and don't care about escaped, nothing escaped in_var
       else
         {
-          if(isalnum(c) || c == '_')
+          if(in_var_index)
+          {
+            if(isdigit(c)) {
+              var_index = c-48;
+              is_var_index= 1;
+            }
+            in_var_index= 0;
+          }
+          else if(c == '.')
+          {
+            in_var_index= 1;
+          }
+          else if(c == '@' && var_buf_offset==0)
+          {
+            is_static=1;
+          }
+         else if(isalnum(c) || c == '_')
             {
               if(var_buf_offset < sizeof(var_buf) - 1)
                 var_buf[var_buf_offset++] = c;
@@ -197,8 +218,34 @@
               var_buf[var_buf_offset] = 0;
               Dictionary* d = (*dictionaries)[var_buf];
               if(!d)
-                die(0, "The dictionary %s does not exist", var_buf);
-              const char* word = d->next_word();
+                die(1, "The dictionary %s does not exist", var_buf);
+              char *word, *new_word;
+              if(is_static) {
+                if(!static_words[var_buf]) {
+                  new_word = (char *)d->next_word();
+                  static_words[var_buf] = new string(new_word);
+                }
+                word = (char *)(*static_words[var_buf]).c_str();
+              } else {
+                word = (char *)d->next_word();
+              }
+
+              if(is_var_index && var_index)
+              {
+                char *match = word, *comma;
+                char *match_copy;
+                for(int n=0; n < var_index-1; n++) {
+                  match= strchr(match, '|');
+                  match++;
+                }
+                if(!(comma= strchr(match, '|')))
+                  comma= strchr(match, 0);
+                match_copy = (char *) malloc(comma-match);
+                strncpy(match_copy, match, comma-match);
+                
+                match_copy[comma-match]= 0;
+                word = match_copy;
+              }
               int word_len = strlen(word);
               
               if(2*word_len + offset + 2 < max_query) 
@@ -209,6 +256,10 @@
 
               var_buf_offset = 0;
               in_var = 0;
+              is_static= 0;
+              is_var_index= 0;
+              in_var_index= 0;
+              var_index= 0;
               
             }
         }
